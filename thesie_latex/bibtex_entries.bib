
@inproceedings{la_torre_analyzing_2009,
	address = {New York, {NY}, {USA}},
	series = {{PLDI} '09},
	title = {Analyzing Recursive Programs Using a Fixed-point Calculus},
	isbn = {978-1-60558-392-1},
	url = {http://doi.acm.org/10.1145/1542476.1542500},
	doi = {10.1145/1542476.1542500},
	abstract = {We show that recursive programs where variables range over finite domains can be effectively and efficiently analyzed by describing the analysis algorithm using a formula in a fixed-point calculus. In contrast with programming in traditional languages, a fixed-point calculus serves as a high-level programming language to easily, correctly, and succinctly describe model-checking algorithms While there have been declarative high-level formalisms that have been proposed earlier for analysis problems (e.g., Datalog the fixed-point calculus we propose has the salient feature that it also allows algorithmic aspects to be specified. We exhibit two classes of algorithms of symbolic ({BDD}-based) algorithms written using this framework-- one for checking for errors in sequential recursive Boolean programs, and the other to check for errors reachable within a bounded number of context-switches in a concurrent recursive Boolean program. Our formalization of these otherwise complex algorithms is extremely simple, and spans just a page of fixed-point formulae. Moreover, we implement these algorithms in a tool called Getafix which expresses algorithms as fixed-point formulae and evaluates them efficiently using a symbolic fixed-point solver called Mucke. The resulting model-checking tools are surprisingly efficient and are competitive in performance with mature existing tools that have been fine-tuned for these problems.},
	urldate = {2014-06-24},
	booktitle = {Proceedings of the 2009 {ACM} {SIGPLAN} Conference on Programming Language Design and Implementation},
	publisher = {{ACM}},
	author = {La Torre, Salvatore and Parthasarathy, Madhusudan and Parlato, Gennaro},
	year = {2009},
	keywords = {abstraction, logic, model-checking, mu-calculus, recursive systems, software verification},
	pages = {211–222}
}

@misc{_getafix_2009,
	title = {Getafix -- Boolean program checker},
	url = {http://www.cs.uiuc.edu/homes/madhu/getafix/},
	urldate = {2014-06-24},
	year = {2009},
	file = {Getafix -- Boolean program checker:C\:\\Users\\陈佳\\AppData\\Roaming\\Zotero\\Zotero\\Profiles\\qizmya1b.default\\zotero\\storage\\F2PCFBPE\\getafix.html:text/html}
}

@misc{_interproc_2011,
	title = {Interproc},
	url = {http://pop-art.inrialpes.fr/people/bjeannet/bjeannet-forge/interproc/index.html},
	urldate = {2014-06-24},
	year = {2011},
	file = {Interproc:C\:\\Users\\陈佳\\AppData\\Roaming\\Zotero\\Zotero\\Profiles\\qizmya1b.default\\zotero\\storage\\7IRZTEHE\\index.html:text/html}
}

@misc{_mtc_2008,
	title = {{MTC} (Models and Theory of Computation): {BLAST} Project},
	url = {http://mtc.epfl.ch/software-tools/blast/index-epfl.php},
	urldate = {2014-06-24},
	year = {2008},
	file = {MTC (Models and Theory of Computation)\: BLAST Project:C\:\\Users\\陈佳\\AppData\\Roaming\\Zotero\\Zotero\\Profiles\\qizmya1b.default\\zotero\\storage\\G93UNE8G\\index-epfl.html:text/html}
}